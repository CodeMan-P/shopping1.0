<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://java.sun.com/xml/ns/javaee"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
	id="WebApp_ID" version="3.0">
	<display-name>shopping1.0</display-name>

	<context-param>
		<param-name>log4jConfigLocation</param-name>
		<param-value>/WEB-INF/log4j.properties</param-value>
	</context-param>
	<context-param>
		<param-name>log4jRefreshInterval</param-name>
		<param-value>1800000</param-value>
	</context-param>

	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>
            classpath:ApplicationContext.xml
    </param-value>
	</context-param>

	<!-- javax.naming.NameNotFoundException -->
	<context-param>
		<param-name>spring.profiles.active</param-name>
		<param-value>dev</param-value>
	</context-param>
	<context-param>
		<param-name>spring.profiles.default</param-name>
		<param-value>dev</param-value>
	</context-param>
	<context-param>
		<param-name>spring.liveBeansView.mbeanDomain</param-name>
		<param-value>dev</param-value>
	</context-param>

	<listener>
		<listener-class>com.util.Log4jConfigListener</listener-class>
	</listener>

	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>

	<servlet-mapping>
		<servlet-name>default</servlet-name>
		<url-pattern>*.js</url-pattern>
		<url-pattern>*.css</url-pattern>
		<url-pattern>*.png</url-pattern>
		<url-pattern>*.jpg</url-pattern>
		<url-pattern>*.PNG</url-pattern>
<!-- 		<url-pattern>/admin/*</url-pattern> -->
	</servlet-mapping>

	<servlet>
		<display-name>Login</display-name>
		<servlet-name>Login</servlet-name>
		<servlet-class>com.servelet.Login</servlet-class>
	</servlet>
	<servlet-mapping>
		<servlet-name>Login</servlet-name>
		<url-pattern>/login</url-pattern>
	</servlet-mapping>
	<servlet>
		<servlet-name>searchServlet</servlet-name>
		<servlet-class>com.servelet.searchServlet</servlet-class>
	</servlet>
	<servlet-mapping>
		<servlet-name>searchServlet</servlet-name>
		<url-pattern>/search</url-pattern>
	</servlet-mapping>
	<servlet>
		<display-name>ProInfo</display-name>
		<servlet-name>ProInfo</servlet-name>
		<servlet-class>com.servelet.ProInfo</servlet-class>
	</servlet>
	<servlet-mapping>
		<servlet-name>ProInfo</servlet-name>
		<url-pattern>/ProInfo</url-pattern>
	</servlet-mapping>
	<servlet>
		<display-name>ShoppingCar</display-name>
		<servlet-name>ShoppingCar</servlet-name>
		<servlet-class>com.servelet.ShoppingCarSlt</servlet-class>
	</servlet>
	<servlet-mapping>
		<servlet-name>ShoppingCar</servlet-name>
		<url-pattern>/Spcar</url-pattern>
	</servlet-mapping>
	<servlet>
		<servlet-name>UserManagerSlt</servlet-name>
		<servlet-class>com.servelet.UserManagerSlt</servlet-class>
	</servlet>
	<servlet-mapping>
		<servlet-name>UserManagerSlt</servlet-name>
		<url-pattern>/UMS</url-pattern>
	</servlet-mapping>

	<!--使用Spring MVC,配置DispatcherServlet是第一步。DispatcherServlet是一个Servlet,,所以可以配置多个DispatcherServlet -->
	<!--DispatcherServlet是前置控制器，配置在web.xml文件中的。拦截匹配的请求，Servlet拦截匹配规则要自已定义，把拦截下来的请求，依据某某规则分发到目标Controller(我们写的Action)来处理。 -->
	<servlet>
		<servlet-name>DispatcherServlet</servlet-name><!--在DispatcherServlet的初始化过程中，框架会在web应用的 
			WEB-INF文件夹下寻找名为[servlet-name]-servlet.xml 的配置文件，生成文件中定义的bean。 -->
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<!--指明了配置文件的文件名，不使用默认配置文件名，而使用dispatcher-servlet.xml配置文件。 -->
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<!--其中<param-value>**.xml</param-value> 这里可以使用多种写法 -->
			<!--1、不写,使用默认值:/WEB-INF/<servlet-name>-servlet.xml -->
			<!--2、<param-value>/WEB-INF/classes/dispatcher-servlet.xml</param-value> -->
			<!--3、<param-value>classpath*:dispatcher-servlet.xml</param-value> -->
			<!--4、多个值用逗号分隔 -->

			<param-value>classpath:Dispatcher-servlet.xml</param-value>
			<!-- classpath:Dispatcher-servlet.xml</param-value> -->
		</init-param>
		<load-on-startup>1</load-on-startup><!--是启动顺序，让这个Servlet随Servletp容器一起启动。 -->
	</servlet>
	<servlet-mapping>
		<!--这个Servlet的名字是dispatcher，可以有多个DispatcherServlet，是通过名字来区分的。每一个DispatcherServlet有自己的WebApplicationContext上下文对象。同时保存的ServletContext中和Request对象中. -->
		<!--ApplicationContext是Spring的核心，Context我们通常解释为上下文环境，我想用“容器”来表述它更容易理解一些，ApplicationContext则是“应用的容器”了:P，Spring把Bean放在这个容器中，在需要的时候，用getBean方法取出 -->
		<servlet-name>DispatcherServlet</servlet-name>
		<!--Servlet拦截匹配规则可以自已定义，当映射为@RequestMapping("/user/add")时，为例,拦截哪种URL合适？ -->
		<!--1、拦截*.do、*.htm， 例如：/user/add.do,这是最传统的方式，最简单也最实用。不会导致静态文件（jpg,js,css）被拦截。 -->
		<!--2、拦截/，例如：/user/add,可以实现现在很流行的REST风格。很多互联网类型的应用很喜欢这种风格的URL。弊端：会导致静态文件（jpg,js,css）被拦截后不能正常显示。 -->
		<url-pattern>/</url-pattern> <!--会拦截URL中带“/”的请求。 -->
	</servlet-mapping>

	<filter>
		<filter-name>myFilter</filter-name>
		<filter-class>com.Filter.RequestFilter</filter-class>
		<init-param>
			<param-name>begin</param-name>
			<param-value>index.jsp</param-value>
		</init-param>
		<init-param>
			<param-name>param</param-name>
			<param-value>admin,uc,addressAnd,addJson,goods_detailAnd,IndexAnd,regist.jsp,list.jsp,QrCode,ck,qrcheck.jsp,login,index.jsp,ProInfo,goods.jsp,.css,.png,.jpg,.PNG,.JPG,search</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>myFilter</filter-name>
		<url-pattern>/css/*</url-pattern>
		<url-pattern>/img/*</url-pattern>
		<url-pattern>/json/*</url-pattern>
		<url-pattern>/jsp/*</url-pattern>
		<url-pattern>/META-INF/*</url-pattern>
		<url-pattern>/target/*</url-pattern>
		<url-pattern>/WEB-INF/*</url-pattern>
	</filter-mapping>

	<filter>
		<filter-name>characterEncodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
		<init-param>
			<param-name>forceEncoding</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>characterEncodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>


	<welcome-file-list>
		<welcome-file>index.jsp</welcome-file>
		<welcome-file>index.html</welcome-file>
		<welcome-file>index.htm</welcome-file>
		<welcome-file>default.html</welcome-file>
		<welcome-file>default.htm</welcome-file>
		<welcome-file>default.jsp</welcome-file>
	</welcome-file-list>
</web-app>